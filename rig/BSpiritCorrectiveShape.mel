/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: BSpiritCorrectiveShape v1.0
''    Author: Christian Breitling
''    Last Updated: July 6, 2004
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=animation#3018
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

/*___________________________________________________________________________
|
|   BSpiritCorrectiveShape v1.0
|
|   Copyright (C) 2004 Christian Breitling
|   Last modified: July 04, 2004 Germany
|   
|   Email: christian.breitling@gmx.de
|   
|
|   This program is free software; you can redistribute it and/or
|   modify it under the terms of the GNU General Public License
|   as published by the Free Software Foundation; either version 2
|   of the License, or (at your option) any later version.
|
|   This program is distributed in the hope that it will be useful,
|   but WITHOUT ANY WARRANTY; without even the implied warranty of
|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
|   GNU General Public License for more details.
|
|   You should have received a copy of the GNU General Public License
|   along with this program; if not, write to the Free Software
|   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
|
|   The GNU GPL is also available at http://www.gnu.org/licenses/gpl.html
|
|____________________________________________________________________________

  What CorrectiveShape is for:
  ----------------------------
  Create a corrective blend shape for your binded mesh. 


  How is it working: 
  ------------------
  In general vertices in Maya behave different than normal if they are binded.
  The rotation of a joint also affects the local space of the binded vertices.
  Moving them in the viewport causes very funny effects. But for creating 
  corrective blend shapes normal behavior would be best. Duplicating the binded
  mesh and applying it afterwards as blend shape causes wrong vertex behavior.
  So the world position of the blend shape has to be translated to the local 
  space of the skinned mesh.

  This is done by the following script wich uses an equitation to get the right
  motion vector.


  How to use it:
  --------------  

  - Copy this mel script in one of your script directories of Maya.

  - Move the skinned mesh to the desired pose.

  - Duplicate it without any connections. 
    The duplicate can be translated freely. The original mesh mustn`t change.

  - Model the appropriate corrections for this pose.

  - Select the newly created corrective shape and then the original mesh.

  - run "BSpiritCorrectiveShape" in the command line or script editor.


  You will receive a perfect blend shape mesh. Assigning it is your task. 
  Don`t forget to change the input connection order. Blend shapes have to be
  first (bottom) in the stack.

  If anything could be better, nothing is functioning or you just want to write
  me - don`t bother

  Christian Breitling

  christian.breitling@gmx.de

_____________________________________________________________________________
*/

global proc BSpiritCorrectiveShape() {

  // Select the blend shape and then the skinned mesh 

  string $Temp[] = `ls -sl`;

  if (`size $Temp` == 2) {

    string $BaseModel = $Temp[1];
    string $BlendShape = $Temp[0];
    string $Skin = `findRelatedSkinCluster $BaseModel`;
    string $SkinResult;

    if ($Skin == "") {

      do {

        string $promptDialogResult = `promptDialog 
  
          -title "Missing SkinCluster"
          -message "Enter a valid skinCluster for the selected baseMesh"
          -button "Proceed" -button "Abort"
          -defaultButton "Proceed" -cancelButton "Abort"
          -dismissString "Abort"`;

        if ($promptDialogResult == "Proceed") {

          string $NewSkinCluster = `promptDialog -query -text`;
          
          if (`objExists $NewSkinCluster`) {

            string $SkinClusterSet = `listConnections -destination true ($NewSkinCluster + ".usedBy[0]")`;
            string $QueryBaseModel = `listConnections -source true ($SkinClusterSet + ".instObjGroups[0].objectGroups[0]")`;

            if ($QueryBaseModel == $BaseModel)
              $SkinResult = "Proceed";      
          }
        }

        else 
          $SkinResult = "Abort";  

      } while (($SkinResult != "Abort") && ($SkinResult != "Proceed"));
    }
    else $SkinResult = "Proceed";

    if ($SkinResult == "Proceed") {

      float $Progress = 0.0; 
      float $BaseTempOffset[] = `getAttr ($BaseModel+".translate")`;
      float $BlendTempOffset[] = `getAttr ($BlendShape+".translate")`;
      float $Offset[3];
      float $targetPosArray[];
      float $absPosArray[];
      float $relPosArray[];

      $Offset[0] = $BlendTempOffset[0] - $BaseTempOffset[0];
      $Offset[1] = $BlendTempOffset[1] - $BaseTempOffset[1];
      $Offset[2] = $BlendTempOffset[2] - $BaseTempOffset[2];

      int $vertexNameArray[];
      int $VertexCount[] = `polyEvaluate -v $BaseModel`;
      int $BlendVertexCount[] = `polyEvaluate -v $BlendShape`;

      string $ShapeNode[] = `pickWalk -d down $BaseModel`;

      if (! `connectionInfo -isDestination ($ShapeNode[0] + ".tweakLocation")`) {

        string $TweakSet[] = `listConnections -destination true ($ShapeNode[0] + ".instObjGroups[0].objectGroups[1]")`;
        string $Tweaknode[] = `listConnections -source true ($TweakSet[0] + ".usedBy[0]")`;
        connectAttr ($Tweaknode[0] + ".vlist[0].vertex[0]") ($ShapeNode[0] + ".tweakLocation");

      }

      progressWindow

        -title "BSpirit Corrective Shape"
        -progress $Progress
        -status "Calculating VertexMovements"
        -isInterruptable true
        -min 0
        -max 100;

      if ($VertexCount[0] == $BlendVertexCount[0]) {  

        for ($i = 0; $i < $VertexCount[0]; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 * $i / $VertexCount[0] + 0.5)`;
          progressWindow -e -progress $Progress;

          string $vertexName = $BlendShape + ".vtx[" + $i + "]";
          float $targetPos[] = `pointPosition -w $vertexName`;

          $vertexName = $BaseModel + ".vtx[" + $i + "]"; 
          float $Pos[] = `pointPosition -w $vertexName`;
          float $relVertexPos[] = `getAttr $vertexName`;

          $targetPos[0] -= ($Pos[0]+$Offset[0]);
          $targetPos[1] -= ($Pos[1]+$Offset[1]);
          $targetPos[2] -= ($Pos[2]+$Offset[2]); 

          if (($targetPos[0]>0.001) || ($targetPos[0]<-0.001) || ($targetPos[1]>0.001) || ($targetPos[1]<-0.001) || ($targetPos[2]>0.001) || ($targetPos[2]<-0.001)) {

            int $vertexArraySize = `size $vertexNameArray`;

            $vertexNameArray[$vertexArraySize] = $i;

            $targetPosArray[($vertexArraySize * 3)] = $targetPos[0];
            $targetPosArray[($vertexArraySize * 3 + 1)] = $targetPos[1];
            $targetPosArray[($vertexArraySize * 3 + 2)] = $targetPos[2];
  
            $absPosArray[($vertexArraySize * 3)] = $Pos[0];
            $absPosArray[($vertexArraySize * 3 + 1)] = $Pos[1];
            $absPosArray[($vertexArraySize * 3 + 2)] = $Pos[2];

            $relPosArray[($vertexArraySize * 3)] = $relVertexPos[0];
            $relPosArray[($vertexArraySize * 3 + 1)] = $relVertexPos[1];
            $relPosArray[($vertexArraySize * 3 + 2)] = $relVertexPos[2];

          }
        }

        int $vertexNameArraySize = `size $vertexNameArray`;

        progressWindow -e -status "Calculating VertexMatrix";


        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 + 60.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          $Pos[0] = $absPosArray[($i * 3)];
          $Pos[1] = $absPosArray[($i * 3 + 1)];
          $Pos[2] = $absPosArray[($i * 3 + 2)];

          $targetPos[0] = $targetPosArray[($i * 3)];
          $targetPos[1] = $targetPosArray[($i * 3 + 1)];
          $targetPos[2] = $targetPosArray[($i * 3 + 2)];

          $vertexName = $BaseModel + ".vtx[" + $vertexNameArray[$i] + "]";

          float $return[];
          float $denominator;
          float $tempPos[];
          float $matrixEq[];

          move -r 1 0 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[0]  = $tempPos[0]-$Pos[0];
          $matrixEq[4]  = $tempPos[1]-$Pos[1];
          $matrixEq[8]  = $tempPos[2]-$Pos[2];
          $matrixEq[3]  = $targetPos[0];

          move -r -1 1 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[1]  = $tempPos[0]-$Pos[0];
          $matrixEq[5]  = $tempPos[1]-$Pos[1];
          $matrixEq[9]  = $tempPos[2]-$Pos[2];
          $matrixEq[7]  = $targetPos[1];

          move -r 0 -1 1 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[2]  = $tempPos[0]-$Pos[0];
          $matrixEq[6]  = $tempPos[1]-$Pos[1];
          $matrixEq[10] = $tempPos[2]-$Pos[2];
          $matrixEq[11] = $targetPos[2];

          $denominator = 

          ($matrixEq[0] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]))) - 
          ($matrixEq[1] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]))) + 
          ($matrixEq[2] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8])));

          if ($denominator != 0) { 

            $return[0] = 
 
            (
            ($matrixEq[3] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) + 
            ($matrixEq[2] * (($matrixEq[7]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[11] )))
            ) / $denominator;

            $return[1] = 
 
            (
            ($matrixEq[0] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) -
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]  ))) + 
            ($matrixEq[2] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  )))
            ) / $denominator;

            $return[2] =

            (
            ($matrixEq[0] * (($matrixEq[5]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  ))) + 
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8]  )))
            ) / $denominator;

            move -r $return[0] $return[1] ($return[2]-1) $vertexName;

          }
        }
  
      if (! `progressWindow -query -isCancelled` ) {
     
          setAttr ($Skin + ".envelope" ) 0;
          string $BlendDuplicate[] = `duplicate -rc -rr $BaseModel`;
          string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};

          for ($i = 0; $i < 9; $i++) {

            setAttr -lock 0 ($BlendDuplicate[0] + $UnlockAttributes[$i]);

          }
        }
  
        progressWindow -e -st "Reseting BaseMesh";

        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          $Progress = `trunc (80.0 + 20.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          setAttr ($BaseModel+".vtx["+ $vertexNameArray[$i] +"]") $relPosArray[($i*3)] $relPosArray[($i*3+1)] $relPosArray[($i*3+2)];

        }

        setAttr ($Skin + ".envelope") 1;

      }
  
      else print "BaseMesh and BlendShape should contain the same amount of vertices";
      progressWindow -endProgress;

    }
  }

  else 
    print "Select the blend shape and then the skinned mesh - try again";

}